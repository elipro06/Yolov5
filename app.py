import cv2
import streamlit as st
import numpy as np
import pandas as pd
import torch

# Configuraci√≥n de p√°gina Streamlit
st.set_page_config(
    page_title="Detecci√≥n de Objetos en Tiempo Real",
    page_icon="üîç",
    layout="wide"
)

# Funci√≥n para cargar el modelo YOLOv5
@st.cache_resource
def load_yolov5_model():
    try:
        model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)
        return model
    except Exception as e:
        st.error(f"‚ùå Error al cargar el modelo: {str(e)}")
        st.info("""
        Recomendaciones:
        1. Aseg√∫rate de tener una conexi√≥n a internet.
        2. Usa las versiones compatibles de torch y torchvision en tu requirements.txt:
           torch==1.12.0
           torchvision==0.13.0
        """)
        return None

# T√≠tulo y descripci√≥n de la aplicaci√≥n
st.title("üîç Detecci√≥n de Objetos en Im√°genes")
st.markdown("""
Esta aplicaci√≥n utiliza YOLOv5 para detectar objetos en im√°genes capturadas con tu c√°mara.
Ajusta los par√°metros en la barra lateral para personalizar la detecci√≥n.
""")

# Cargar el modelo
with st.spinner("Cargando modelo YOLOv5..."):
    model = load_yolov5_model()

# Si el modelo se carg√≥ correctamente, configuramos los par√°metros
if model:
    # Sidebar para los par√°metros de configuraci√≥n
    st.sidebar.title("Par√°metros")
    
    # Ajustar par√°metros del modelo
    with st.sidebar:
        st.subheader('Configuraci√≥n de detecci√≥n')
        conf_thres = st.slider('Confianza m√≠nima', 0.0, 1.0, 0.25, 0.01)
        iou_thres = st.slider('Umbral IoU', 0.0, 1.0, 0.45, 0.01)
        st.caption(f"Confianza: {conf_thres:.2f} | IoU: {iou_thres:.2f}")
    
    # Contenedor principal para la c√°mara y resultados
    main_container = st.container()
    
    with main_container:
        # Capturar foto con la c√°mara
        picture = st.camera_input("Capturar imagen", key="camera")
        
        if picture:
            # Procesar la imagen capturada
            bytes_data = picture.getvalue()
            cv2_img = cv2.imdecode(np.frombuffer(bytes_data, np.uint8), cv2.IMREAD_COLOR)
            
            # Realizar la detecci√≥n
            with st.spinner("Detectando objetos..."):
                try:
                    results = model(cv2_img, size=640)
                    results = results.pandas().xyxy[0]
                except Exception as e:
                    st.error(f"Error durante la detecci√≥n: {str(e)}")
                    st.stop()
            
            # Mostrar resultados
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Imagen con detecciones")
                img_with_boxes = model(cv2_img)
                img_with_boxes.render()
                st.image(img_with_boxes.ims[0], channels="BGR", use_column_width=True)
            
            with col2:
                st.subheader("Objetos detectados")
                if not results.empty:
                    results_filtered = results[results['confidence'] >= conf_thres]
                    st.dataframe(results_filtered[['name', 'confidence']], use_container_width=True)
                    category_counts = results_filtered['name'].value_counts()
                    st.bar_chart(category_counts)
                else:
                    st.info("No se detectaron objetos con los par√°metros actuales.")
                    st.caption("Prueba a reducir el umbral de confianza en la barra lateral.")
else:
    st.error("No se pudo cargar el modelo. Por favor verifica las dependencias e int√©ntalo nuevamente.")
    st.stop()

# Informaci√≥n adicional y pie de p√°gina
st.markdown("---")
st.caption("""
**Acerca de la aplicaci√≥n**: Esta aplicaci√≥n utiliza YOLOv5 para detecci√≥n de objetos en tiempo real.
Desarrollada con Streamlit y PyTorch.
""")
